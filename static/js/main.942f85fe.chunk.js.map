{"version":3,"sources":["Components/Card.js","Components/Board.js","Components/GameSettings.js","Components/GameStatus.js","services/helper.js","Components/Game.js","index.js"],"names":["Card","e","this","props","flipped","blocked","onClick","id","preventDefault","notifyClick","className","src","imageURL","process","alt","Component","Board","i","key","j","handleClick","imagesURL","permanentlyFlipped","temporaryFlipped","blockAll","grid","row","push","createCard","reportClicked","createGrid","Navbar","navItems","botActive","navBot","navTwoPlayer","Settingsform","playerInputs","htmlFor","type","placeholder","required","value","difficulty","name","defaultChecked","GameSettings","state","setState","playerName1","playerName2","timeoutTime","botDifficulty","document","getElementById","checked","settings","submitSettings","renderTwoPlayerOptions","renderBotOptions","GameStatus","title","finished","winner","playerPoints","playerNames","currentPlayer","window","confirm","location","reload","restartGame","getPossibleFlips","map","item","index","length","filter","undefined","Game","initializing","images","Array","fill","onceFlipped","botWaitTime","timeOutIDs","imagesURLTemp","numberOfImages","numbers","Set","size","add","Math","floor","random","from","urlList","forEach","number","getMemoryImagesURL","imagesTemp","list","url","img","Image","preload","temp","shuffle","concat","clearTimeout","gameStart","tempArrOnceFlipped","slice","setTimeout","botFlip","tempArrPermFlipped","tempPoints","tempFinished","every","tempBlockAll","newCurrentPlayer","tempArrTempFlipped","cardToFlip","possibleFlips","stupidFlip","setTemporaryFlipped","onceFlippedMatch","flippedImages","matches","matchesIndex","smartFlip","geniusFlip","gameRestart","ReactDOM","render"],"mappings":"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","file":"static/js/main.942f85fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n\tnotifyClick(e) {\r\n\t\t// Notify Board about the click if images is NOT flipped\r\n\t\tif (!this.props.flipped && !this.props.blocked) {\r\n\t\t\tthis.props.onClick(this.props.id);\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.props.flipped) {\r\n\t\t\treturn (\r\n\t\t\t<div onClick={e => this.notifyClick(e)} className=\"card memory-card d-flex justify-content-center align-items-center\">\r\n\t\t\t\t<img className=\"front-image\" src={this.props.imageURL} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div onClick={e => this.notifyClick(e)} className=\"card memory-card memory-card-back d-flex justify-content-center align-items-center\">\r\n\t\t\t\t\t<img className=\"back-image\" src={process.env.PUBLIC_URL + '/pokeball.png'} alt=\"pokeball\"/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from './Card'\r\n\r\nclass Board extends Component {\r\n\tcreateCard(i) {\r\n\t\treturn <Card \r\n\t\t\tkey = {i}\r\n\t\t\tid = {i}\r\n\t\t\tonClick = {(j) => this.handleClick(j)} \r\n\t\t\timageURL = {this.props.imagesURL[i]}\r\n\t\t\tflipped = {this.props.permanentlyFlipped[i] || (i === this.props.temporaryFlipped[0]) || (i === this.props.temporaryFlipped[1])}\r\n\t\t\tblocked = {this.props.blockAll} />\r\n\t}\r\n\r\n\tcreateGrid() {\r\n\t\tlet grid = [];\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tlet row = [];\r\n\t\t\tfor (let j = 0; j < 4; j++) {\r\n\t\t\t\trow.push(this.createCard(i*4 + j))\r\n\t\t\t}\r\n\t\t\tgrid.push(<div key={i} className=\"row flex-nowrap\">{row}</div>);\r\n\t\t}\r\n\t\treturn grid;\r\n\t}\r\n\r\n\thandleClick(i) {\r\n\t\tthis.props.reportClicked(i);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div className=\"container d-flex justify-content-center flex-nowrap\">\r\n\t\t\t<div>\r\n\t\t\t\t{this.createGrid()}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\n// Nav bar inte settings card\r\nfunction Navbar (props) {\r\n\tconst navItems = [];\r\n\tif (props.botActive) {\r\n\t\tnavItems.push(<div key=\"botNav\" className=\"p-3 col-6 text-center settings-nav border-right\" onClick={() => props.navBot()}>Play Against Bot</div>);\r\n\t\tnavItems.push(<div key=\"twoPlayerNav\" className=\"p-3 col-6 text-center settings-nav bg-light border-bottom\" onClick={() => props.navTwoPlayer()}>Two Players</div>);\r\n\t} else {\r\n\t\tnavItems.push(<div key=\"botNav\" className=\"p-3 col-6 text-center settings-nav bg-light border-right border-bottom\" onClick={() => props.navBot()}>Play Against Bot</div>);\r\n\t\tnavItems.push(<div key=\"twoPlayerNav\" className=\"p-3 col-6 text-center settings-nav\" onClick={() => props.navTwoPlayer()}>Two Players</div>);\r\n\t}\r\n\r\n\treturn <div className=\"row ml-0 mr-0 mt-0\">\r\n\t\t{navItems}\r\n\t</div>;\r\n}\r\n\r\nfunction Settingsform (props) {\r\n\t// Player name or bot input\r\n\tconst playerInputs = [];\r\n\tif (props.botActive) {\r\n\t\tplayerInputs.push(<div key=\"player\" className=\"col-6\">\r\n\t\t\t\t<label htmlFor=\"player\">Player</label>\r\n    \t\t<input type=\"text\" id=\"player\" className=\"form-control\" placeholder=\"Name of player\"/>\r\n\t\t\t</div>);\r\n\t\tplayerInputs.push(<div key=\"bot\" className=\"col-6\">\r\n\t\t\t\t<label htmlFor=\"bot\">Bot</label>\r\n\t\t\t\t<select id=\"bot\" className=\"custom-select cursor-pointer\" required>\r\n      \t\t<option value=\"easy\">Easy</option>\r\n      \t\t<option value=\"medium\">Medium</option>\r\n      \t\t<option value=\"hard\">Hard</option>\r\n    \t\t</select>\r\n\t\t\t</div>);\r\n\t} else {\r\n\t\tplayerInputs.push(<div key=\"player1\" className=\"col-6\">\r\n\t\t\t\t<label htmlFor=\"player1\">Player 1</label>\r\n    \t\t<input type=\"text\" id=\"player1\" className=\"form-control\" placeholder=\"Name of player 1\"/>\r\n\t\t\t</div>);\r\n\t\tplayerInputs.push(<div key=\"player2\" className=\"col-6\">\r\n\t\t\t\t<label htmlFor=\"player2\">Player 2</label>\r\n\t\t\t\t<input type=\"text\" id=\"player2\" className=\"form-control\" placeholder=\"Name of player 2\"/>\r\n\t\t\t</div>);\r\n\t}\r\n\r\n\t// Difficulty options\r\n\tconst difficulty = <div className=\"d-flex justify-content-center flex-nowrap mt-3\">\r\n\t\t<legend className=\"col-form-label col-3\">Game Pace:</legend>\r\n\t\t\t<div className=\"form-check form-check-inline\">\r\n\t\t\t\t<input className=\"form-check-input cursor-pointer\" type=\"radio\" name=\"speed\" id=\"speed-slow\" value=\"slow\" defaultChecked=\"checked\" />\r\n\t\t\t\t<label className=\"form-check-label\" htmlFor=\"speed-slow\">Slow</label>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-check form-check-inline\">\r\n\t\t\t\t<input className=\"form-check-input cursor-pointer\" type=\"radio\" name=\"speed\" id=\"speed-moderate\" value=\"moderate\" />\r\n\t\t\t\t<label className=\"form-check-label\" htmlFor=\"speed-moderate\">Moderate</label>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-check form-check-inline\">\r\n\t\t\t\t<input className=\"form-check-input cursor-pointer\" type=\"radio\" name=\"speed\" id=\"speed-fast\" value=\"fast\" />\r\n\t\t\t\t<label className=\"form-check-label\" htmlFor=\"speed-fast\">Fast</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t// Return the form\r\n\treturn <div className=\"form-group\">\r\n\t\t\t<div className=\"row ml-0 mr-0 mt-3\">\r\n\t\t\t\t{playerInputs}\r\n\t\t\t</div>\r\n\t\t\t{difficulty}\r\n\t\t</div>\r\n}\r\n\r\n// GameSettings component that gathers all settings set by the player\r\nclass GameSettings extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbotActive: true,\r\n\t\t}\r\n\t}\r\n\r\n\trenderBotOptions() {\r\n\t\tthis.setState({\r\n\t\t\tbotActive: true,\r\n\t\t});\r\n\t}\r\n\r\n\trenderTwoPlayerOptions() {\r\n\t\tthis.setState({\r\n\t\t\tbotActive: false,\r\n\t\t});\r\n\t}\r\n\r\n\tsubmitSettings() {\r\n\t\tlet playerName1;\r\n\t\tlet playerName2;\r\n\t\tlet timeoutTime;\r\n\t\tlet botDifficulty = 'easy';\r\n\t\t// Player settings\r\n\t\tif (this.state.botActive) {\r\n\t\t\t// Set player name 1 to value of input or player if it is empty\r\n\t\t\tplayerName1 = document.getElementById('player').value ? document.getElementById('player').value : 'Player';\r\n\t\t\tplayerName2 = 'Bot';\r\n\t\t\t// Set how smart the bot is\r\n\t\t\tbotDifficulty = document.getElementById('bot').value\r\n\t\t} else {\r\n\t\t\t// Set player name 1 to value of input or player 1 if it is empty\r\n\t\t\tplayerName1 = document.getElementById('player1').value ? document.getElementById('player1').value : 'Player 1';\r\n\t\t\tplayerName2 = document.getElementById('player2').value ? document.getElementById('player2').value : 'Player 2';\r\n\t\t}\r\n\t\t// Set the difficulty, this is actually only the timeout time\r\n\t\tif (document.getElementById('speed-slow').checked) {\r\n\t\t\ttimeoutTime = 2000;\r\n\t\t}\r\n\t\tif (document.getElementById('speed-moderate').checked) {\r\n\t\t\ttimeoutTime = 750;\r\n\t\t}\r\n\t\tif (document.getElementById('speed-fast').checked) {\r\n\t\t\ttimeoutTime = 250;\r\n\t\t}\r\n\t\t// Create the settings object\r\n\t\tlet settings = {\r\n\t\t\ttimeoutTime: timeoutTime,\r\n\t\t\tplayerName1: playerName1,\r\n\t\t\tplayerName2: playerName2,\r\n\t\t\tbotActive: this.state.botActive,\r\n\t\t\tbotDifficulty: botDifficulty,\r\n\t\t};\r\n\r\n\t\t// Transfer the settings to Game\r\n\t\tthis.props.submitSettings(settings);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div className=\"d-flex align-items-center justify-content-center vh-100\">\r\n\t\t\t<div className=\"card settings-card\">\r\n\t\t\t\t<Navbar \r\n\t\t\t\t\tbotActive = {this.state.botActive}\r\n\t\t\t\t\tnavTwoPlayer = {() => this.renderTwoPlayerOptions()}\r\n\t\t\t\t\tnavBot = {() => this.renderBotOptions()}\r\n\t\t\t\t/>\r\n\t\t\t\t<Settingsform\r\n\t\t\t\t\tbotActive = {this.state.botActive}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t<button className=\"btn btn-primary mt-3 mb-3\" onClick = {() => this.submitSettings()}>Start game</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default GameSettings;","import React, { Component } from 'react';\r\n\r\nclass GameStatus extends Component {\r\n\trender() {\r\n\t\tlet title;\r\n\t\tif (!this.props.finished) {\r\n\t\t\ttitle = <h5 className=\"card-title\">{`${this.props.playerNames[this.props.currentPlayer]}: Go!`}</h5>\r\n\t\t} else {\r\n\t\t\t// Check which player has the most points\r\n\t\t\tlet winner = this.props.playerPoints[0] > this.props.playerPoints[1] ? 0 : 1;\r\n\t\t\t// Check whether it was a draw\r\n\t\t\twinner = this.props.playerPoints[0] === this.props.playerPoints[1] ? null : winner;\r\n\t\t\t// Announce the results\r\n\t\t\tif (winner === null) {\r\n\t\t\t\ttitle = <h5 className=\"card-title\">Game finished with a draw!</h5>\r\n\t\t\t} else {\r\n\t\t\t\ttitle = <h5 className=\"card-title\">{`Game finished, winner is ${this.props.playerNames[winner]}`}</h5>\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn <div className=\"container d-flex justify-content-center\">\r\n\t\t\t<div className=\"card status-card text-center mt-3 mb-1\">\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t\t<h5 className=\"card-title\">Points</h5>\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<div className=\"col-6\">{`${this.props.playerNames[0]}: ${this.props.playerPoints[0]}`}</div>\r\n\t\t\t\t\t\t<div className=\"col-6\">{`${this.props.playerNames[1]}: ${this.props.playerPoints[1]}`}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"row mt-3\">\r\n\t\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={() => {\r\n\t\t\t\t\t\t\t\tif (window.confirm(\"Are you sure you want to go back to settings?\")) {\r\n\t\t\t\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}>Back to settings</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={() => {\r\n\t\t\t\t\t\t\t\tif (window.confirm(\"Are you sure you want to restart the game?\")) {\r\n\t\t\t\t\t\t\t\t\tthis.props.restartGame();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}>Restart Game</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n  \t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default GameStatus;","// Returns a list of url's containing the images that will be used within the memory game\r\nexport function getMemoryImagesURL(numberOfImages) {\r\n\tconst pokemonURL = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\r\n\tconst maxNumber = 807; // This corresponds to Zeraora, the last pokemon in the PokeAPI\r\n\r\n\t// Create a unique set of numbers\r\n\tlet numbers = new Set();\r\n\twhile (numbers.size < numberOfImages) {\r\n\t\tnumbers.add(Math.floor(Math.random() * maxNumber) + 1)\r\n\t}\r\n\r\n\t// Go through the list and add it to url list of the images\r\n\tnumbers = Array.from(numbers);\r\n\tconst urlList = [];\r\n\tnumbers.forEach(number => {\r\n\t\turlList.push(pokemonURL + number + '.png');\r\n\t});\r\n\r\n\t// Return the url list\r\n\treturn urlList;\r\n}\r\n\r\n// Fisher-Yates shuffle\r\nexport function shuffle(list) {\r\n\tlet j;\r\n\tlet temp;\r\n\tfor (let i = list.length - 1; i > 0; i--){\r\n\t\tj = Math.floor(Math.random() * i);\r\n\t\ttemp = list[i];\r\n\t\tlist[i] = list[j];\r\n\t\tlist[j] = temp;\r\n\t}\r\n\treturn list;\r\n}\r\n\r\n// Preloads the images from an array of urls\r\nexport function preload(list) {\r\n\tconst images = [];\r\n\tlist.forEach((url) => {\r\n\t\tconst img = new Image();\r\n\t\timg.src = url;\r\n\t\timages.push(img);\r\n\t});\r\n\treturn images;\r\n}\r\n\r\n// Helper function to get all possible flips considering what is permanentlyflipped and temporaryflipped\r\nfunction getPossibleFlips(temporaryFlipped, permanentlyFlipped) {\r\n\treturn permanentlyFlipped.map((item, index) => {\r\n\t\t// Check that card is not permanently flipped\r\n\t\tif (!item) {\r\n\t\t\t// Check that card is not temporary flipped\r\n\t\t\tif ((!temporaryFlipped.length) || (index !== temporaryFlipped[0])) {\r\n\t\t\t\treturn index;\r\n\t\t\t}\r\n\t\t} // Filter out the undefind items from map\r\n\t}).filter((item) => {\r\n\t\treturn item !== undefined\r\n\t});\r\n}\r\n\r\n// Flips a card randomly that is not in temporaryFlipped or permanentlyFlipped\r\nexport function stupidFlip(temporaryFlipped, permanentlyFlipped) {\r\n\t// Get the possible flips\r\n\tconst possibleFlips = getPossibleFlips(temporaryFlipped, permanentlyFlipped);\r\n\t// Randomize a number in the possible flip array\r\n\tconst cardToFlip = possibleFlips[Math.floor(Math.random() * (possibleFlips.length - 1))];\r\n\treturn cardToFlip;\r\n}\r\n\r\n// If there is a temporary flipped card, try to find the same card in onceFlipped\r\n// If that image has never been flipped before, flip a card that is has never been flipped before\r\n// If there is no temporary flipped card, try to find if there is a matching pair in once flipped\r\nexport function smartFlip(temporaryFlipped, permanentlyFlipped, onceFlipped, images) {\r\n\t// Get the possible flips\r\n\tconst possibleFlips = getPossibleFlips(temporaryFlipped, permanentlyFlipped);\r\n\tif (temporaryFlipped.length === 1) {\r\n\t\t// There is a temporary flipped\r\n\t\t// Find if there is a matching card that has once been flipped\r\n\t\tconst onceFlippedMatch = possibleFlips.filter((number) => {\r\n\t\t\treturn images[number] === images[temporaryFlipped[0]] && onceFlipped[number];\r\n\t\t});\r\n\t\tif (onceFlippedMatch.length) {\r\n\t\t\treturn onceFlippedMatch[0];\r\n\t\t} else {\r\n\t\t\t// No match that has been flipped before, lets flip the first unflipped card\r\n\t\t\tconst neverFlipped = possibleFlips.filter((number) => {\r\n\t\t\t\treturn !onceFlipped[number];\r\n\t\t\t});\r\n\t\t\t// We are sure that we will find a hit here, otherwise, we would have found a hit on the matched\r\n\t\t\treturn neverFlipped[0];\r\n\t\t}\r\n\t} else {\r\n\t\t// No temporary flipped\r\n\t\t// First find if there are any matching images from the possible flips that has been flipped before\r\n\t\t// Get array of image urls that has been flipped\r\n\t\tconst flippedImages = possibleFlips.filter((item) => {\r\n\t\t\treturn onceFlipped[item];\r\n\t\t}).map((item) => {\r\n\t\t\treturn images[item];\r\n\t\t});\r\n\t\t// Find matches in images that has ever been flipped (and that is in possible flips)\r\n\t\tconst matches = [];\r\n\t\tfor (let i = 0; i < flippedImages.length; i++) {\r\n\t\t\tfor (let j = i+1; j < flippedImages.length; j++) {\r\n\t\t\t\tif (flippedImages[i] === flippedImages[j]) {\r\n\t\t\t\t\tmatches.push(flippedImages[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// We have found at least a pair that matched. Lets find out the index number from the images\r\n\t\tif (matches.length > 0) {\r\n\t\t\tconst matchesIndex = [];\r\n\t\t\tpossibleFlips.forEach((number) => {\r\n\t\t\t\tif (images[number] === matches[0]) {\r\n\t\t\t\t\tmatchesIndex.push(number);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn matchesIndex[0];\r\n\t\t} else {\r\n\t\t\t// No matches that we know about. Lets flip the first possible flip card that has never been flipped before\r\n\t\t\tconst unknownPossibleFlips = possibleFlips.filter(number => {\r\n\t\t\t\treturn !onceFlipped[number];\r\n\t\t\t});\r\n\t\t\treturn unknownPossibleFlips[0];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// If there is a temporary flipped card, flip the matching one\r\n// Else, flip any of the unmatched card\r\nexport function geniusFlip(temporaryFlipped, permanentlyFlipped, images) {\r\n\t// Get the possible flips\r\n\tconst possibleFlips = getPossibleFlips(temporaryFlipped, permanentlyFlipped);\r\n\tif (temporaryFlipped.length === 1) {\r\n\t\t// There is a temporary flipped\r\n\t\t// Find the matching non-flipped card and flip that one\r\n\t\tconst cardToFlip = possibleFlips.filter((number) => {\r\n\t\t\treturn (images[number] === images[temporaryFlipped[0]])\r\n\t\t});\r\n\t\treturn cardToFlip[0];\r\n\t} else {\r\n\t\t// No temporary flipped\r\n\t\t// Flip a random card from the possible flips\r\n\t\tconst cardToFlip = possibleFlips[Math.floor(Math.random() * (possibleFlips.length - 1))];\r\n\t\treturn cardToFlip;\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Board from './Board';\r\nimport GameSettings from './GameSettings';\r\nimport GameStatus from './GameStatus';\r\nimport {getMemoryImagesURL, shuffle, preload, stupidFlip, smartFlip, geniusFlip} from './../services/helper';\r\n\r\nclass Game extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t// Whether game should render the Board or the settings page\r\n\t\t\tinitializing: true,\r\n\t\t\t// Contains the images\r\n\t\t\timages: [],\r\n\t\t\t// Contains the images urls\r\n\t\t\timagesURL: [],\r\n\t\t\t// Keeps track of which cards are flipped permanently\r\n\t\t\tpermanentlyFlipped: Array(16).fill(false),\r\n\t\t\t// Keeps track of which cards that are flipped temporarily (only 2 maximum)\r\n\t\t\ttemporaryFlipped: [],\r\n\t\t\t// Keeps track of which cards that has ever been flipped, only for the bot\r\n\t\t\tonceFlipped: Array(16).fill(false),\r\n\t\t\t// Timeout time for the flip back when incorrect cards are guessed\r\n\t\t\ttimeoutTime: null,\r\n\t\t\t// How long time the bot waits between card flips\r\n\t\t\tbotWaitTime: 500,\r\n\t\t\t// Blocks everything from being clicked\r\n\t\t\tblockAll: false,\r\n\t\t\t// Player points\r\n\t\t\tplayerPoints: [0, 0],\r\n\t\t\t// Player Names in string\r\n\t\t\tplayerNames: [null, null],\r\n\t\t\t// Current Player\r\n\t\t\tcurrentPlayer: 0,\r\n\t\t\t// Keeps track of whether the game is finished\r\n\t\t\tfinished: false,\r\n\t\t\t// Keeps track of all timeout IDs in order to clear them\r\n\t\t\ttimeOutIDs: [],\r\n\t\t}\r\n\t}\r\n\r\n\t// Start the game loading the images, and settings correct states\r\n\tgameStart(settings) {\r\n\t\t// Get 8 random images\r\n\t\tlet imagesURLTemp = getMemoryImagesURL(8);\r\n\t\t// Repeat the 8 random images\r\n\t\timagesURLTemp = imagesURLTemp.concat(imagesURLTemp);\r\n\t\t// Shuffle the image array\r\n\t\timagesURLTemp = shuffle(imagesURLTemp);\r\n\t\t// Preloads the images so that the games feels smoother\r\n\t\tconst imagesTemp = preload(imagesURLTemp);\r\n\r\n\t\tthis.setState({\r\n\t\t\ttimeoutTime: settings.timeoutTime,\r\n\t\t\tinitializing: false,\r\n\t\t\timagesURL: imagesURLTemp,\r\n\t\t\timages: imagesTemp,\r\n\t\t\tplayerNames: [settings.playerName1, settings.playerName2],\r\n\t\t\tbotActive: settings.botActive,\r\n\t\t\tbotDifficulty: settings.botDifficulty,\r\n\t\t\tpermanentlyFlipped: Array(16).fill(false),\r\n\t\t\ttemporaryFlipped: [],\r\n\t\t\tonceFlipped: Array(16).fill(false),\r\n\t\t\tcurrentPlayer: 0,\r\n\t\t\tblockAll: false,\r\n\t\t\tplayerPoints: [0, 0],\r\n\t\t});\r\n\t}\r\n\r\n\tgameRestart() {\r\n\t\tconst settings = {\r\n\t\t\ttimeoutTime: this.state.timeoutTime,\r\n\t\t\tplayerName1: this.state.playerNames[0],\r\n\t\t\tplayerName2: this.state.playerNames[1],\r\n\t\t\tbotActive: this.state.botActive,\r\n\t\t\tbotDifficulty: this.state.botDifficulty,\r\n\t\t}\r\n\t\tthis.state.timeOutIDs.forEach(id => clearTimeout(id));\r\n\t\tthis.gameStart(settings);\r\n\t}\r\n\r\n\t// Set specific card to temporary flipped\r\n\tsetTemporaryFlipped(i) {\r\n\t\t// Prepare the once flipped array to be set later\r\n\t\tconst tempArrOnceFlipped = this.state.onceFlipped.slice();\r\n\t\ttempArrOnceFlipped[i] = true;\t\r\n\t\t// Check whether another card is flipped\r\n\t\tif (this.state.temporaryFlipped.length === 0) {\r\n\t\t\t// If this is the first of the pair that is flipped, set it to flipped\r\n\t\t\t// Also set the once flipped array\r\n\t\t\tthis.setState({\r\n\t\t\t\ttemporaryFlipped: [i],\r\n\t\t\t\tonceFlipped: tempArrOnceFlipped,\r\n\t\t\t}, \r\n\t\t\t// Then we call the botFlip\r\n\t\t\t() => {\r\n\t\t\t\tif (this.state.botActive && this.state.currentPlayer === 1) {\r\n\t\t\t\t\tthis.state.timeOutIDs.push(setTimeout(() => {\r\n\t\t\t\t\t\tthis.botFlip();\r\n\t\t\t\t\t}, this.state.botWaitTime));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Else check if the urls match, i.e, is the same image\r\n\t\t\tif (this.state.imagesURL[this.state.temporaryFlipped[0]] === this.state.imagesURL[i]) {\r\n\t\t\t\t// Set the matched cards to permanently flipped\r\n\t\t\t\tconst tempArrPermFlipped = this.state.permanentlyFlipped.slice();\r\n\t\t\t\ttempArrPermFlipped[i] = true;\r\n\t\t\t\ttempArrPermFlipped[this.state.temporaryFlipped[0]] = true;\r\n\t\t\t\t// Give points to current player\r\n\t\t\t\tconst tempPoints = this.state.playerPoints.slice();\r\n\t\t\t\ttempPoints[this.state.currentPlayer] = tempPoints[this.state.currentPlayer] + 1;\r\n\t\t\t\t// Check if all cards have been flipped. Then we have a winner (or a draw)\r\n\t\t\t\tconst tempFinished = tempArrPermFlipped.every((flipped) => {return flipped})\r\n\t\t\t\t// Also set the once flipped array\r\n\t\t\t\tconst tempBlockAll = this.state.currentPlayer && this.state.botActive;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tpermanentlyFlipped: tempArrPermFlipped,\r\n\t\t\t\t\tplayerPoints: tempPoints,\r\n\t\t\t\t\tonceFlipped: tempArrOnceFlipped,\r\n\t\t\t\t\tblockAll: tempBlockAll,\r\n\t\t\t\t\ttemporaryFlipped: [],\r\n\t\t\t\t\tfinished: tempFinished,\r\n\t\t\t\t},\r\n\t\t\t\t// Then we call the botFlip\r\n\t\t\t\t() => {\r\n\t\t\t\t\tif (this.state.botActive && this.state.currentPlayer === 1 && !this.state.finished) {\r\n\t\t\t\t\t\tthis.state.timeOutIDs.push(setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.botFlip();\r\n\t\t\t\t\t\t}, this.state.botWaitTime));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Wrong cards have been flipped. Set temporary flipped for both and wait some time before flipping back\r\n\t\t\t\tthis.state.timeOutIDs.push(setTimeout(() => {\r\n\t\t\t\t\t// Switch the current player\r\n\t\t\t\t\t// Also set the once flipped array here\r\n\t\t\t\t\tconst newCurrentPlayer = this.state.currentPlayer ? 0 : 1;\r\n\t\t\t\t\t// block All if new current player is bot\r\n\t\t\t\t\tconst tempBlockAll = newCurrentPlayer && this.state.botActive;\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcurrentPlayer: newCurrentPlayer,\r\n\t\t\t\t\t\tonceFlipped: tempArrOnceFlipped,\r\n\t\t\t\t\t\tblockAll: tempBlockAll,\r\n\t\t\t\t\t\ttemporaryFlipped: [],\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// Then we call the botFlip\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tif (this.state.botActive && this.state.currentPlayer === 1) {\r\n\t\t\t\t\t\t\tthis.state.timeOutIDs.push(setTimeout(() => {\r\n\t\t\t\t\t\t\t\tthis.botFlip();\r\n\t\t\t\t\t\t\t}, this.state.botWaitTime));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t}, this.state.timeoutTime));\r\n\t\t\t\t// While we are in timeout, set both cards to show and block all clicks\r\n\t\t\t\tconst tempArrTempFlipped = this.state.temporaryFlipped.slice();\r\n\t\t\t\ttempArrTempFlipped.push(i);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttemporaryFlipped: tempArrTempFlipped,\r\n\t\t\t\t\tblockAll: true,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Function for the bot flip\r\n\tbotFlip() {\r\n\t\tif (this.state.botDifficulty === 'easy') {\r\n\t\t\t// Stupid Bot\r\n\t\t\t// The Stupid Bot flips a card that is not permanently flipped randomly\r\n\t\t\tconst cardToFlip = stupidFlip(this.state.temporaryFlipped, this.state.permanentlyFlipped);\r\n\t\t\tthis.setTemporaryFlipped(cardToFlip);\r\n\t\t} else if (this.state.botDifficulty === 'medium') {\r\n\t\t\t// Smart Bot\r\n\t\t\t// The Smart Bot flips cards that have been revealed before to match them\r\n\t\t\t// Else it flips a new card to get information\r\n\t\t\t// It remembers all cards that have ever been flipped\r\n\t\t\tconst cardToFlip = smartFlip(this.state.temporaryFlipped, this.state.permanentlyFlipped, this.state.onceFlipped, this.state.imagesURL);\r\n\t\t\tthis.setTemporaryFlipped(cardToFlip);\r\n\t\t} else if (this.state.botDifficulty === 'hard') {\r\n\t\t\t// Genius Bot\r\n\t\t\t// The genius bot knows all cards even though they never been flipped.\r\n\t\t\t// If human is not incredibly lucky, the genius bot will always win.\r\n\t\t\tconst cardToFlip = geniusFlip(this.state.temporaryFlipped, this.state.permanentlyFlipped, this.state.imagesURL);\r\n\t\t\tthis.setTemporaryFlipped(cardToFlip);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.initializing) {\r\n\t\t\treturn <GameSettings \r\n\t\t\t\tsubmitSettings = {settings => this.gameStart(settings)}/>\r\n\t\t} else {\r\n\t\t\treturn <div>\r\n\t\t\t\t<GameStatus \r\n\t\t\t\t\tcurrentPlayer = {this.state.currentPlayer}\r\n\t\t\t\t\tplayerNames = {this.state.playerNames}\r\n\t\t\t\t\tplayerPoints = {this.state.playerPoints}\r\n\t\t\t\t\tfinished = {this.state.finished}\r\n\t\t\t\t\trestartGame = {() => this.gameRestart()} \r\n\t\t\t\t/>\r\n\t\t\t\t<Board \r\n\t\t\t\t\timagesURL = {this.state.imagesURL}\r\n\t\t\t\t\treportClicked = {i =>this.setTemporaryFlipped(i)}\r\n\t\t\t\t\tpermanentlyFlipped = {this.state.permanentlyFlipped}\r\n\t\t\t\t\ttemporaryFlipped = {this.state.temporaryFlipped}\r\n\t\t\t\t\tblockAll = {this.state.blockAll}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Components/Game'\nimport './index.css';\n\nReactDOM.render(\n    <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}